{"version":3,"sources":["components/auth/Login.js","components/auth/NuevaCuenta.js","context/proyectos/proyectoContext.js","components/proyectos/NuevoProyecto.js","context/tareas/tareaContext.js","components/proyectos/Proyecto.js","components/proyectos/ListadoProyectos.js","components/layout/Sidebar.js","components/layout/Barra.js","components/tareas/FormTarea.js","components/tareas/Tarea.js","components/tareas/ListadoTareas.js","components/proyectos/Proyectos.js","types/index.js","context/proyectos/proyectoReducer.js","context/proyectos/proyectoState.js","context/tareas/tareaReducer.js","context/tareas/tareaState.js","App.js","reportWebVitals.js","index.js"],"names":["Login","useState","email","password","usuario","guardarUsuario","onChange","e","target","name","value","className","onSubmit","preventDefault","htmlFor","type","id","placeholder","to","NuevaCuenta","nombre","confirmar","proyectoContext","createContext","NuevoProyecto","proyectosContext","useContext","formulario","errorformulario","mostrarFormulario","agregarProyecto","mostrarError","proyecto","guardarProyecto","onClick","tareaContext","Proyecto","proyectoActual","obtenerTareas","ListadoProyectos","proyectos","obtenerProyectos","useEffect","length","TransitionGroup","map","CSSTransition","timeout","classNames","Sidebar","Barra","href","FormTarea","tareasContext","tareaseleccionada","errortarea","agregarTarea","validarTarea","actualizarTarea","limpiarTarea","guardarTarea","tarea","trim","console","log","proyectoId","estado","Tarea","eliminarProyecto","eliminarTarea","cambiarEstadoTarea","guardarTareaActual","cambiarEstado","seleccionarTarea","ListadoTareas","tareasproyecto","Proyectos","FORMULARIO_PROYECTO","OBTENER_PROYECTOS","AGREGA_PROYECTO","VALIDAR_FORMULARIO","PROYECTO_ACTUAL","ELIMINAR_PROYECTO","TAREAS_PROYECTO","AGREGAR_TAREA","VALIDAR_TAREA","ELIMINAR_TAREA","ESTADO_TAREA","TAREA_ACTUAL","ACTUALIZAR_TAREA","LIMPIAR_TAREA","state","action","payload","filter","ProyectoState","props","useReducer","proyectoReducer","dispatch","Provider","uuid","children","tareas","TareaState","tareaReducer","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36b491a4.chunk.js","sourcesContent":["import React, {useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst Login = () => {\r\n\r\n\r\n    //State para iniciar sesión\r\n    const [usuario, guardarUsuario] = useState({\r\n        email: '',\r\n        password: ''\r\n    });\r\n\r\n    //Extraer usuario\r\n    const { email, password } = usuario;\r\n\r\n    const onChange = e => {\r\n        guardarUsuario({\r\n            ...usuario,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    //Cuando el usuario quiere iniciar sesión\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        //Validar que no hay campos vacios\r\n\r\n        //Pasarlo al action\r\n    }\r\n\r\n    return ( \r\n        <div className=\"form-usuario\">\r\n            <div className=\"contenedor-form sombra-dark\">\r\n                <h1>Iniciar sesión</h1>\r\n\r\n                <form\r\n                    onSubmit={onSubmit}\r\n                >\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"Tu correo\"\r\n                            value={email}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            placeholder=\"Tu password\"\r\n                            value={password}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <input type=\"submit\" className=\"btn btn-primario btn-block\" value=\"Iniciar sesión\" />\r\n                    </div>\r\n                </form>\r\n                <Link to={ '/nueva-cuenta'} className=\"enlace-cuenta\">\r\n                    Crear cuenta\r\n                </Link>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Login;","import React, {useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst NuevaCuenta = () => {\r\n\r\n\r\n    //State para iniciar sesión\r\n    const [usuario, guardarUsuario] = useState({\r\n        nombre: '',\r\n        email: '',\r\n        password: '',\r\n        confirmar:''\r\n    });\r\n\r\n    //Extraer usuario\r\n    const { nombre, email, password, confirmar } = usuario;\r\n\r\n    const onChange = e => {\r\n        guardarUsuario({\r\n            ...usuario,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    //Cuando el usuario quiere iniciar sesión\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n\r\n        //Validar que no haya campos vacíos\r\n\r\n        //Password Mínimo de 6 caracteres\r\n\r\n        // Password identico a Confirmar\r\n\r\n        //Pasarlo al action\r\n    }\r\n\r\n    return ( \r\n        <div className=\"form-usuario\">\r\n            <div className=\"contenedor-form sombra-dark\">\r\n                <h1>Crear cuenta</h1>\r\n\r\n                <form\r\n                    onSubmit={onSubmit}\r\n                >\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"nombre\">Nombre completo</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"nombre\"\r\n                            name=\"nombre\"\r\n                            placeholder=\"Nombre completo\"\r\n                            value={nombre}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"email\">Email</label>\r\n                        <input\r\n                            type=\"email\"\r\n                            id=\"email\"\r\n                            name=\"email\"\r\n                            placeholder=\"Tu correo\"\r\n                            value={email}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"password\">Password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            name=\"password\"\r\n                            placeholder=\"Tu password\"\r\n                            value={password}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <label htmlFor=\"confirmar\">Confirmar password</label>\r\n                        <input\r\n                            type=\"password\"\r\n                            id=\"confirmar\"\r\n                            name=\"confirmar\"\r\n                            placeholder=\"Confirma tu password\"\r\n                            value={confirmar}\r\n                            onChange={onChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo-form\">\r\n                        <input type=\"submit\" className=\"btn btn-primario btn-block\" value=\"Registrar\" />\r\n                    </div>\r\n                </form>\r\n                <Link to={ '/'} className=\"enlace-cuenta\">\r\n                    Iniciar sesión\r\n                </Link>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default NuevaCuenta;","import { createContext } from 'react';\r\n\r\nconst proyectoContext = createContext();\r\n\r\nexport default proyectoContext;","import React, { Fragment, useState, useContext } from 'react';\r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\n\r\nconst NuevoProyecto = () => {\r\n\r\n    //Obtener el STATE del formulario\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { formulario, errorformulario,  mostrarFormulario, agregarProyecto, mostrarError} = proyectosContext;\r\n \r\n    const [proyecto, guardarProyecto] = useState({\r\n        nombre: ''\r\n    });\r\n\r\n    //Extraer el nombre del proyecto\r\n    const { nombre } = proyecto;\r\n\r\n    //cuando el usuario cambia el nombre del proyecto\r\n    const onChangeProyecto = e => {\r\n        guardarProyecto({\r\n            ...proyecto,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    //cuando el usuario envia un proyecto\r\n    const onSubmitProyecto = e => {\r\n        e.preventDefault();\r\n        //Validar el proyecto\r\n        if(nombre == ''){\r\n            mostrarError();\r\n            return;\r\n        }\r\n        //agregar al state\r\n        agregarProyecto(proyecto);\r\n        //Reiniciar el form\r\n        guardarProyecto({\r\n            nombre:''\r\n        })\r\n        \r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn btn-block btn-primario\"\r\n                onClick={ () => mostrarFormulario() }\r\n            >Nuevo proyecto </button>\r\n            { formulario ? \r\n                (\r\n                    <form\r\n                        className=\"formulario-nuevo-proyecto\"\r\n                        onSubmit={onSubmitProyecto}\r\n                    >\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"input-text\"\r\n                        placeholder=\"Nombre proyecto\"\r\n                        name=\"nombre\" \r\n                        value={nombre}\r\n                        onChange={onChangeProyecto}\r\n                    />\r\n\r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-primario btn-block\"\r\n                        value=\"Agregar proyecto\" \r\n                    />\r\n                    </form>\r\n                )\r\n                : null\r\n            }\r\n            { errorformulario  ? <p className=\"mensaje error\">El nombre del Proyecto es obligatorio</p> : null}\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default NuevoProyecto;","import { createContext } from 'react';\r\n\r\nconst tareaContext = createContext();\r\n\r\nexport default tareaContext;","import React, { useContext } from 'react';\r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\nimport tareaContext from '../../context/tareas/tareaContext';\r\n\r\nconst Proyecto = ({proyecto}) => {\r\n        //Obtener el STATE de proyectos\r\n        const proyectosContext = useContext(proyectoContext);\r\n        const { proyectoActual } = proyectosContext;\r\n\r\n        //obtener el STATE de las tareas\r\n        const tareasContext = useContext(tareaContext);\r\n        const { obtenerTareas } = tareasContext;\r\n\r\n        //Funcion para definir el proyecto actual\r\n        const seleccionarProyecto = id => {\r\n            proyectoActual(id); //asigan un proyecto seleccionado \r\n            obtenerTareas(id);  //Filtra las tareas del proyecto\r\n        }\r\n    return ( \r\n        <li>\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn btn-blank\"\r\n                onClick={() => seleccionarProyecto(proyecto.id) }\r\n            >{proyecto.nombre}</button>\r\n        </li>\r\n     );\r\n}\r\n \r\nexport default Proyecto;","import React, { useContext, useEffect } from 'react';\r\nimport Proyecto from './Proyecto';\r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\nimport {CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nconst ListadoProyectos = () => {\r\n\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyectos, obtenerProyectos } = proyectosContext;\r\n\r\n    useEffect(()=>{\r\n        obtenerProyectos();\r\n\r\n        // eslint-disable-next-line\r\n    },[]);  \r\n\r\n    if(proyectos.length === 0) return <p>No hay proyectos</p>;\r\n\r\n    return ( \r\n        <ul className=\"listado-proyectos\">\r\n            <TransitionGroup>\r\n                {proyectos.map(proyecto => (\r\n                    <CSSTransition\r\n                        key={proyecto.id}\r\n                        timeout={300}\r\n                        classNames=\"proyecto\"\r\n                    >\r\n                        <Proyecto\r\n                            proyecto={proyecto}\r\n                        />\r\n                    </CSSTransition>\r\n                ))}\r\n            </TransitionGroup>\r\n\r\n        </ul>\r\n     );\r\n}\r\n \r\nexport default ListadoProyectos;","import React from 'react';\r\nimport NuevoProyecto from '../proyectos/NuevoProyecto';\r\nimport ListadoProyectos from '../proyectos/ListadoProyectos';\r\nconst Sidebar = () => {\r\n    return ( \r\n        <aside>\r\n            <h1>MERN<span>Tasks</span></h1>\r\n\r\n            <NuevoProyecto />\r\n\r\n            <div className=\"proyectos\">\r\n                <h2>Tus proyectos</h2>\r\n                <ListadoProyectos />\r\n            </div>\r\n\r\n        </aside>\r\n     );\r\n}\r\n \r\nexport default Sidebar;","import React from 'react';\r\n\r\nconst Barra = () => {\r\n    return ( \r\n        <header className=\"app-header\">\r\n            <p className=\"nombre-usuario\">Hola <span>Usuario</span></p>\r\n            <nav className=\"nav-principal\">\r\n                <a href=\"#!\">Cerrar sesión</a>\r\n            </nav>\r\n        </header>\r\n     );\r\n}\r\n \r\nexport default Barra;","import React, { useContext, useState, useEffect } from 'react';\r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\nimport tareaContext from '../../context/tareas/tareaContext';\r\n\r\nconst FormTarea = () => {\r\n\r\n    //Extraer si un proyecto esta activo\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyecto } = proyectosContext;\r\n\r\n    //obtener el STATE de las tareas\r\n    const tareasContext = useContext(tareaContext);\r\n    const { tareaseleccionada, errortarea, agregarTarea, validarTarea, obtenerTareas, actualizarTarea, limpiarTarea } = tareasContext;\r\n\r\n    //efect que detecta si hay una tarea seleccionada\r\n    useEffect(() => {\r\n        if(tareaseleccionada !== null){\r\n           guardarTarea(tareaseleccionada)\r\n        }else{\r\n            guardarTarea({\r\n                nombre: ''\r\n            })\r\n        }\r\n    }, [tareaseleccionada]);\r\n\r\n\r\n    //State del formulario\r\n    const [tarea, guardarTarea] = useState({\r\n        nombre: ''\r\n    })\r\n\r\n    // Extraer el nombre del proyecto\r\n    const { nombre } = tarea;\r\n    \r\n    //Si no hay proyecto seleccionado\r\n    if(!proyecto) return null;\r\n\r\n    //Array Destructuring para extraer el proyecto actual\r\n    const [proyectoActual] = proyecto;\r\n\r\n    //Leer los valores del formulario\r\n    const handleChange = e => {\r\n        guardarTarea({\r\n            ...tarea,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    const onSubmit = e => {\r\n        e.preventDefault();\r\n        //validar\r\n        if(nombre.trim() === ''){\r\n            validarTarea();\r\n            console.log('valido tarea');\r\n            return;\r\n        }\r\n        //Validar si es edicion o nueva tarea\r\n        if(tareaseleccionada === null){\r\n            //Agregar la nueva tarea\r\n            tarea.proyectoId = proyectoActual.id;\r\n            tarea.estado = false;\r\n            agregarTarea(tarea);\r\n        } else {\r\n            actualizarTarea(tarea);\r\n\r\n            //Elimina tarea seleccionada\r\n            limpiarTarea();\r\n        }\r\n        \r\n        //Obtener y filtrar las tareas del proyecto actual\r\n        obtenerTareas(proyectoActual.id);\r\n        //Reiniciar form\r\n        guardarTarea({\r\n            nombre:''\r\n        });\r\n    }\r\n\r\n    return ( \r\n        <div className=\"formulario\">\r\n            <form\r\n                onSubmit={onSubmit}\r\n            >\r\n                <div className=\"contenedor-input\">\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"input-text\"\r\n                        placeholder=\"Nombre de la tarea\"\r\n                        name=\"nombre\"\r\n                        value={nombre}\r\n                        onChange={handleChange}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"contenedor-input\">\r\n                    <input\r\n                        type=\"submit\"\r\n                        className=\"btn btn-primario btn-submit btn-block\"\r\n                        value={tareaseleccionada ? 'Editar tarea' :'Agregar tarea'}\r\n                    />\r\n                </div>\r\n            </form>\r\n            {errortarea ? <p className=\"mensaje error\" >El mensaje de la tarea es obligatorio</p> : null}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default FormTarea;","import React, { useContext } from 'react';\r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\nimport tareaContext from '../../context/tareas/tareaContext';\r\n\r\n\r\nconst Tarea = ({tarea}) => {\r\n\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyecto, eliminarProyecto } = proyectosContext;\r\n\r\n    //obtener el STATE de las tareas\r\n    const tareasContext = useContext(tareaContext);\r\n    const { eliminarTarea, obtenerTareas, cambiarEstadoTarea, guardarTareaActual } = tareasContext;\r\n\r\n    //Extraer el proyecto\r\n    const [proyectoActual] = proyecto;\r\n\r\n    //Funcion de eliminar una tarea\r\n    const tareaEliminar = id => {\r\n        eliminarTarea(id);\r\n        obtenerTareas(proyectoActual.id);\r\n    }\r\n\r\n    //Funcion que modifica el estado de las tareas\r\n    const cambiarEstado = tarea => {\r\n        if(tarea.estado){\r\n            tarea.estado = false\r\n        } else {\r\n            tarea.estado = true\r\n        }\r\n        cambiarEstadoTarea(tarea)\r\n    }\r\n\r\n    //Agrega una tarea actual cuando se quiere editar\r\n    const seleccionarTarea = tarea => {\r\n        guardarTareaActual(tarea);\r\n        \r\n    }\r\n\r\n    return ( \r\n        <li className=\"tarea sombra\">\r\n            <p>{tarea.nombre}</p>\r\n            <div className=\"estado\">\r\n                {tarea.estado\r\n                ?   (\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"completo\"\r\n                        onClick={() => cambiarEstado(tarea)}\r\n                    >Completo</button>\r\n                    )\r\n                :   (\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"incompleto\"\r\n                        onClick={() => cambiarEstado(tarea)}\r\n                    >Incompleto</button>\r\n                    )\r\n                }\r\n            </div>\r\n            <div className=\"acciones\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-primario\"\r\n                    onClick={() => seleccionarTarea(tarea)}\r\n                >Editar</button>\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-secundario\"\r\n                    onClick={() => tareaEliminar(tarea.id)}\r\n                >Eliminar</button>\r\n            </div>\r\n        </li>\r\n     );\r\n}\r\n \r\nexport default Tarea;","import React, { Fragment, useContext } from 'react';\r\nimport Tarea from './Tarea';\r\nimport proyectoContext from '../../context/proyectos/proyectoContext';\r\nimport tareaContext from '../../context/tareas/tareaContext';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\n\r\nconst ListadoTareas = () => {\r\n\r\n    const proyectosContext = useContext(proyectoContext);\r\n    const { proyecto, eliminarProyecto } = proyectosContext;\r\n\r\n    //obtener el STATE de las tareas\r\n    const tareasContext = useContext(tareaContext);\r\n    const { tareasproyecto } = tareasContext;\r\n\r\n    //Si no hay proyecto seleccionado\r\n    if(!proyecto) return <h2>Selecciona un proyecto</h2>\r\n\r\n    //Array Destructuring para extraer el proyecto actual\r\n    const [proyectoActual] = proyecto;\r\n\r\n    return ( \r\n        <Fragment>\r\n            <h2> Proyecto: {proyectoActual.nombre} </h2>\r\n            <ul className=\"listado-tareas\">\r\n                {\r\n                    tareasproyecto.length === 0 \r\n                        ?(<li className=\"listado-tareas\"><p>No hay tareas</p></li>)\r\n                        : \r\n                        <TransitionGroup>\r\n                            {tareasproyecto.map(tarea =>(\r\n                            <CSSTransition\r\n                                key={tarea.id}\r\n                                timeout={200}\r\n                                classNames=\"tarea\"\r\n                            > \r\n                                <Tarea\r\n                                tarea={tarea}\r\n                            />\r\n                            </CSSTransition>\r\n                            ))}\r\n                        </TransitionGroup>\r\n                }\r\n            </ul>\r\n\r\n            <button\r\n                type=\"button\"\r\n                className=\"btn btn-eliminar\"\r\n                onClick={() => eliminarProyecto(proyectoActual.id)}\r\n            >Eliminar Proyecto &times;</button>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default ListadoTareas;","import React from 'react';\r\nimport Sidebar from '../layout/Sidebar';\r\nimport Barra from '../layout/Barra';\r\nimport FormTarea from '../tareas/FormTarea';\r\nimport ListadoTareas from '../tareas/ListadoTareas';\r\n\r\nconst Proyectos = () => {\r\n    return ( \r\n        <div className=\"contenedor-app\">\r\n            <Sidebar />\r\n            <div className=\"seccion-principal\">\r\n                <Barra />\r\n                <main>\r\n\r\n                    <FormTarea />\r\n\r\n                    <div className=\"contenedor-tareas\">\r\n                        <ListadoTareas />\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Proyectos;","export const FORMULARIO_PROYECTO = 'FORMULARIO_PROYECTO';\r\nexport const OBTENER_PROYECTOS = 'OBTENER_PROYECTOS';\r\nexport const AGREGA_PROYECTO = 'AGREGA_PROYECTO';\r\nexport const VALIDAR_FORMULARIO = 'VALIDAR_FORMULARIO';\r\nexport const PROYECTO_ACTUAL = 'PROYECTO_ACTUAL';\r\nexport const ELIMINAR_PROYECTO = 'ELIMINAR_PROYECTO'; \r\n\r\nexport const TAREAS_PROYECTO = 'TAREAS_PROYECTO'; \r\nexport const AGREGAR_TAREA = 'AGREGAR_TAREA'; \r\nexport const VALIDAR_TAREA = 'VALIDAR_TAREA';\r\nexport const ELIMINAR_TAREA = 'ELIMINAR_TAREA';\r\nexport const ESTADO_TAREA = 'ESTADO_TAREA';\r\nexport const TAREA_ACTUAL = 'TAREA_ACTUAL';\r\nexport const ACTUALIZAR_TAREA = 'ACTUALIZAR_TAREA';\r\nexport const LIMPIAR_TAREA = 'LIMPIAR_TAREA';","import { FORMULARIO_PROYECTO, OBTENER_PROYECTOS, AGREGA_PROYECTO, VALIDAR_FORMULARIO, PROYECTO_ACTUAL, ELIMINAR_PROYECTO } from \"../../types\";\r\n\r\nexport default (state, action) => {\r\n    switch(action.type) {\r\n        case FORMULARIO_PROYECTO:\r\n            return {\r\n                ...state,\r\n                formulario: true\r\n            }\r\n        case OBTENER_PROYECTOS:\r\n            return {\r\n                ...state,\r\n                proyectos: action.payload\r\n            }\r\n        case AGREGA_PROYECTO:\r\n            return {\r\n                ...state,\r\n                proyectos: [...state.proyectos, action.payload],\r\n                formulario: false,\r\n                errorformulario: false\r\n            }\r\n        case VALIDAR_FORMULARIO:\r\n            return {\r\n                ...state,\r\n                errorformulario: true\r\n            }\r\n        case PROYECTO_ACTUAL:\r\n            return {\r\n                ...state,\r\n                proyecto: state.proyectos.filter(proyecto => proyecto.id === action.payload )\r\n            }\r\n        case ELIMINAR_PROYECTO:\r\n            return {\r\n                ...state,\r\n                proyectos: state.proyectos.filter(proyecto => proyecto.id !== action.payload ),\r\n                proyecto: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { useReducer } from 'react';\r\nimport {v4 as uuid} from \"uuid\"; \r\n\r\nimport proyectoContext from './proyectoContext';\r\nimport proyectoReducer from './proyectoReducer';\r\nimport { FORMULARIO_PROYECTO, OBTENER_PROYECTOS, AGREGA_PROYECTO, VALIDAR_FORMULARIO, PROYECTO_ACTUAL, ELIMINAR_PROYECTO } from '../../types';\r\n\r\nconst ProyectoState = props => {\r\n\r\n    const proyectos = [\r\n        { id:1, nombre: 'Tienda virtual'},\r\n        { id:2, nombre: 'Intranet'},\r\n        { id:3, nombre: 'Diseño de sitio web'}\r\n    ]\r\n\r\n    const initialState = {\r\n        proyectos : [],\r\n        formulario : false,\r\n        errorformulario: false,\r\n        proyecto: null\r\n    }\r\n    //dispatch para crear las acciones\r\n    const [state, dispatch] = useReducer(proyectoReducer, initialState)\r\n    //serie de funciones para el CRUD\r\n    const mostrarFormulario = () => {\r\n        dispatch({\r\n            type: FORMULARIO_PROYECTO\r\n        })\r\n    }\r\n    //Obtener proyectos\r\n    const obtenerProyectos = () => {\r\n        dispatch({\r\n            type: OBTENER_PROYECTOS,\r\n            payload: proyectos\r\n        })\r\n    }\r\n    //Agregar nuevo proyecto\r\n    const agregarProyecto = proyecto => {\r\n        proyecto.id = uuid();\r\n        dispatch({\r\n            type: AGREGA_PROYECTO,\r\n            payload: proyecto\r\n        })\r\n    }\r\n\r\n    //Validar el formulario por errores\r\n    const mostrarError = () => {\r\n        dispatch({\r\n            type: VALIDAR_FORMULARIO\r\n        })\r\n    }\r\n\r\n    //Selecciona el proyecto donde el usuario dio clic\r\n    const proyectoActual = proyectoId => {\r\n        dispatch({\r\n            type: PROYECTO_ACTUAL,\r\n            payload: proyectoId\r\n        })\r\n    }\r\n\r\n    //Elimina un proyecto\r\n    const eliminarProyecto = proyectoId =>{\r\n        dispatch({\r\n            type: ELIMINAR_PROYECTO,\r\n            payload: proyectoId\r\n        })\r\n    } \r\n    return(\r\n        <proyectoContext.Provider\r\n            value={{\r\n                proyectos: state.proyectos,\r\n                formulario: state.formulario,\r\n                errorformulario: state.errorformulario,\r\n                proyecto: state.proyecto,\r\n                mostrarFormulario,\r\n                obtenerProyectos,\r\n                agregarProyecto,\r\n                mostrarError,\r\n                proyectoActual,\r\n                eliminarProyecto\r\n            }}\r\n        >\r\n            {props.children}\r\n        </proyectoContext.Provider>\r\n    )\r\n}\r\n\r\nexport default ProyectoState;","\r\nimport { TAREAS_PROYECTO, AGREGAR_TAREA, VALIDAR_TAREA, \r\n    ELIMINAR_TAREA, ESTADO_TAREA, TAREA_ACTUAL, ACTUALIZAR_TAREA, LIMPIAR_TAREA } from '../../types/index'\r\n\r\n\r\nexport default (state, action) => {\r\n    switch(action.type) {\r\n        case TAREAS_PROYECTO:\r\n            return {\r\n                ...state,\r\n                tareasproyecto: state.tareas.filter(tarea => tarea.proyectoId === action.payload)\r\n            }\r\n        case AGREGAR_TAREA:\r\n            return {\r\n                ...state,\r\n                tareas: [action.payload, ...state.tareas],\r\n                errortarea: false\r\n            }\r\n        case VALIDAR_TAREA:\r\n            return {\r\n                ...state,\r\n                errortarea: true\r\n            }\r\n        case ELIMINAR_TAREA:\r\n            return {\r\n                ...state,\r\n                tareas: state.tareas.filter(tarea => tarea.id !== action.payload)\r\n            }\r\n        case ACTUALIZAR_TAREA:\r\n        case ESTADO_TAREA:\r\n            return {\r\n                ...state,\r\n                tareas: state.tareas.map(tarea => tarea.id === action.payload.id ? action.payload :  tarea)\r\n            }\r\n        case TAREA_ACTUAL:\r\n            return {\r\n                ...state,\r\n                tareaseleccionada: action.payload\r\n            }\r\n        case LIMPIAR_TAREA:\r\n            return{\r\n                ...state,\r\n                tareaseleccionada: null\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import React, { useReducer } from 'react';\r\nimport TareaContext from './tareaContext';\r\nimport tareaReducer from './tareaReducer';\r\nimport {v4 as uuid} from \"uuid\"; \r\n\r\nimport { TAREAS_PROYECTO, AGREGAR_TAREA, VALIDAR_TAREA, ELIMINAR_TAREA, \r\n    ESTADO_TAREA, TAREA_ACTUAL, ACTUALIZAR_TAREA, LIMPIAR_TAREA } from '../../types/index'\r\n\r\nconst TareaState = props => {\r\n    const initialState = {\r\n        tareas: [\r\n            { id: 1, nombre: 'Tarea Uno1', estado: true, proyectoId: 1},\r\n            { id: 2, nombre: 'Tarea Dos2', estado: false, proyectoId: 2},\r\n            { id: 3, nombre: 'Tarea Tres3', estado: false, proyectoId: 3},\r\n            { id: 4, nombre: 'Tarea Cuatro4', estado: true, proyectoId: 4},\r\n            { id: 5, nombre: 'Tarea Uno5', estado: true, proyectoId: 4},\r\n            { id: 6, nombre: 'Tarea Dos6', estado: false, proyectoId: 3},\r\n            { id: 7, nombre: 'Tarea Tres7', estado: false, proyectoId: 2},\r\n            { id: 8, nombre: 'Tarea Cuatro8', estado: true, proyectoId: 1},\r\n            { id: 9, nombre: 'Tarea Uno9', estado: true, proyectoId: 2},\r\n            { id: 10, nombre: 'Tarea Dos10', estado: false, proyectoId: 3},\r\n            { id: 11, nombre: 'Tarea Tres11', estado: false, proyectoId: 4},\r\n            { id: 12, nombre: 'Tarea Cuatro12', estado: true, proyectoId: 1}\r\n        ],\r\n        tareasproyecto: null,\r\n        errortarea: false,\r\n        tareaseleccionada: null\r\n    }\r\n\r\n    //Crear dispatch y state\r\n    const [state, dispatch] = useReducer(tareaReducer, initialState);\r\n\r\n    //Crear las funciones\r\n    const obtenerTareas = proyectoId => {\r\n        dispatch({\r\n            type: TAREAS_PROYECTO, \r\n            payload: proyectoId\r\n        })\r\n    }\r\n\r\n    //Agregar una tarea al proyecto seleccionado\r\n    const agregarTarea = tarea => {\r\n        tarea.id = uuid();\r\n        dispatch({\r\n            type: AGREGAR_TAREA,\r\n            payload: tarea\r\n        })\r\n    }\r\n    \r\n    //Validar y muestra error\r\n    const validarTarea = () => {\r\n        dispatch({\r\n            type: VALIDAR_TAREA\r\n        })\r\n    }\r\n\r\n    //Eliminar tarea por ID\r\n    const eliminarTarea = id => {\r\n        dispatch({\r\n            type: ELIMINAR_TAREA,\r\n            payload: id\r\n        })\r\n    }\r\n\r\n    //Cambia el estado de la tarea\r\n    const cambiarEstadoTarea = tarea => {\r\n        dispatch({\r\n            type: ESTADO_TAREA,\r\n            payload: tarea\r\n        })\r\n    }\r\n\r\n    //Extrae una tarea para edición\r\n    const guardarTareaActual = tarea => {\r\n        dispatch({\r\n            type: TAREA_ACTUAL,\r\n            payload: tarea\r\n        })\r\n    }\r\n\r\n    //Edita o modifica una tarea\r\n    const actualizarTarea = tarea => {\r\n        dispatch({\r\n            type: ACTUALIZAR_TAREA,\r\n            payload: tarea\r\n        })\r\n    }\r\n\r\n    //Elimina la tarea seleccionada\r\n    const limpiarTarea = () => {\r\n        dispatch({\r\n            type: LIMPIAR_TAREA\r\n        })\r\n    }\r\n\r\n    return (\r\n        <TareaContext.Provider\r\n            value={{\r\n                tareas: state.tareas,\r\n                tareasproyecto: state.tareasproyecto,\r\n                errortarea: state.errortarea,\r\n                tareaseleccionada: state.tareaseleccionada,\r\n                obtenerTareas,\r\n                agregarTarea,\r\n                validarTarea,\r\n                eliminarTarea,\r\n                cambiarEstadoTarea,\r\n                guardarTareaActual,\r\n                actualizarTarea,\r\n                limpiarTarea\r\n            }}\r\n        >\r\n            {props.children}\r\n        </TareaContext.Provider>    \r\n    )\r\n}\r\n\r\nexport default TareaState;","import {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\nimport Login from './components/auth/Login';\nimport NuevaCuenta from './components/auth/NuevaCuenta';\nimport Proyectos from './components/proyectos/Proyectos';\n\nimport ProyectoState from './context/proyectos/proyectoState';\nimport TareaState from './context/tareas/tareaState';\n\nfunction App() {\n  return (\n    <ProyectoState>\n        <TareaState>\n        <Router>\n          <Switch>\n            <Route exact path=\"/\" component={Login} />\n            <Route exact path=\"/nueva-cuenta\" component={NuevaCuenta} />\n            <Route exact path=\"/proyectos\" component={Proyectos} />\n          </Switch>\n        </Router>\n        </TareaState>\n      </ProyectoState>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}